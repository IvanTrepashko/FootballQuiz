@page "/addanswer/{QuizID}"

@using Models

@inject HttpClient client
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navigationManager

<h3>Добавьте ответы для викторины</h3>

<EditForm Model="@QuestionModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label>
            Вопрос:
            <InputText class="form-control" @bind-Value="QuestionModel.Question" />
        </label>
    </div>
    <div class="form-group">
        <label>
            Ответ №1
            <InputText class="form-control" @bind-Value="AnswerModel1.AnswerText" />
        </label>
        <div class="form-check">
            <InputCheckbox id="answer1" class="form-check-input" @bind-Value="AnswerModel1.IsCorrect" />
            <label class="form-check-label" for="answer1">Правильный</label>
        </div>
    </div>
    <div class="form-group">
        <label>
            Ответ №2
            <InputText class="form-control" @bind-Value="AnswerModel2.AnswerText" />
        </label>
        <div class="form-check">
            <InputCheckbox id="asnwer2" class="form-check-input" @bind-Value="AnswerModel2.IsCorrect" />
            <label class="form-check-label" for="answer2">Правильный</label>
        </div>
    </div>
    <div class="form-group">
        <label>
            Ответ №3
            <InputText class="form-control" @bind-Value="AnswerModel3.AnswerText" />
        </label>
        <div class="form-check">
            <InputCheckbox id="answer3" class="form-check-input" @bind-Value="AnswerModel3.IsCorrect" />
            <label class="form-check-label" for="answer3">Правильный</label>
        </div>
    </div>
    <button class="btn btn-secondary" type="submit">Добавить вопрос</button>
</EditForm>
<br/>
<button class="btn btn-primary" type="submit" @onclick="SubmitQuiz">Сохранить викторину</button>

@code
{
    [Parameter]
    public string QuizID { get; set; }

    List<QuestionModel> Questions { get; set; }
    QuestionModel QuestionModel { get; set; }
    QuizAnswerModel AnswerModel1 { get; set; }
    QuizAnswerModel AnswerModel2 { get; set; }
    QuizAnswerModel AnswerModel3 { get; set; }

    string UserID { get; set; }

    protected async override Task OnInitializedAsync()
    {
        Questions = new List<QuestionModel>();
        QuestionModel = new QuestionModel();
        AnswerModel1 = new QuizAnswerModel();
        AnswerModel2 = new QuizAnswerModel();
        AnswerModel3 = new QuizAnswerModel();

        base.OnInitialized();
        QuestionModel.AnswerModels.Add(AnswerModel1);
        QuestionModel.AnswerModels.Add(AnswerModel2);
        QuestionModel.AnswerModels.Add(AnswerModel3);

        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();

        UserID = authState.User.Claims.Where(x => x.Type.Equals("sub")).First().Value;
    }

    public void HandleValidSubmit()
    {
        if (this.QuestionModel.AnswerModels.Count(x => x.IsCorrect) != 1)
        {
            return;
        }

        this.QuestionModel.CreationDate = DateTime.Now;

        this.QuestionModel.UserID = UserID;
        QuestionModel.QuizID = new Guid(this.QuizID);
        Questions.Add(this.QuestionModel);

        AnswerModel1 = new QuizAnswerModel();
        AnswerModel2 = new QuizAnswerModel();
        AnswerModel3 = new QuizAnswerModel();

        QuestionModel = new QuestionModel();

        QuestionModel.AnswerModels.Add(AnswerModel1);
        QuestionModel.AnswerModels.Add(AnswerModel2);
        QuestionModel.AnswerModels.Add(AnswerModel3); 
    }

    public void SubmitQuiz()
    {
        client.PostAsJsonAsync<List<QuestionModel>>(@"https://localhost:44333/api/quiz/answers", Questions);
        navigationManager.NavigateTo("/quizzes");
    }
}
