@page "/addquiz"

@using UI.Models;

@inject HttpClient client
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authenticationStateProvider

<h3>Новая викторина</h3>

<EditForm Model="@quizModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
            
    <div class="form-group">
        <label>
            Имя викторины:
            <InputText class="form-control" @bind-Value="quizModel.Name" />
        </label>
    </div>
    <div class="form-group">
        <label>
            Тема викторины
            <InputText class="form-control" @bind-Value="quizModel.Topic" />
        </label>
    </div>
    <div class="form-group">
        <label>
            Краткое описание викторины
            <InputTextArea class="form-control" @bind-Value="quizModel.Description" />
        </label>
    </div>
    <div class="form-group">
        <label>
            Теги (опционально)
            <InputTextArea class="form-control" @bind-Value="quizModel.Tags" />
        </label>
    </div>
        <button class="btn btn-primary" type="submit">Создать</button>
</EditForm>

@code {
    private QuizModel quizModel = new QuizModel();

    private async void HandleValidSubmit()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var userId = user.Claims.Where(x => x.Type.Equals("sub")).First().Value;

        quizModel.CreationDate = DateTime.Now;
        quizModel.UserID = userId;
        quizModel.QuizID = Guid.NewGuid();

        await client.PostAsJsonAsync<QuizModel>(@"https://localhost:44333/api/quiz", quizModel);


        navigationManager.NavigateTo($"/addanswer/{quizModel.QuizID.ToString()}");
    }
}
